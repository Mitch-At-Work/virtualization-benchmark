/// <reference types="../src/vite-env" />

import { preview } from "vite";
import puppeteer from "puppeteer";
import scenarios from "../scenarios.json";
import { generateSamples, scrollOverTime } from "../src/benchmark";
import {
  printSampleMetrics,
  Sample,
  samplesToSampleMetrics,
} from "../src/benchmark/sample";
import { Mode } from "../src/utils/configuration";
import fs from "fs/promises";
import { FrameObject } from "../src/utils/PuppeteerScreenCastFrames";
import rimraf from "rimraf";
import { mkdirIfNotExists } from "../src/utils/mkdirIfNotExists";

type Scenario = typeof scenarios[number];

const PORT = 5000;

export async function runPuppeteerBenchmark() {
  const browser = await puppeteer.launch({
    args: [
      "--font-render-hinting=none",
      "--disable-features=SpareRendererForSitePerProcess",
      "--js-flags=--expose-gc",
      "--enable-precise-memory-info",
      "--enable-gpu-rasterization",
      "--no-first-run",
      "--disable-background-networking",
      "--disable-background-timer-throttling",
      "--disable-cache",
      "--disable-translate",
      "--disable-sync",
      "--disable-extensions",
      "--disable-default-apps",
    ],
    headless: false,
    devtools: true,
  });

  const result = await scenarios.reduce(async (acc, scenario) => {
    const previous = await acc;
    const [samples, images] = await generateSamples({
      browser,
      mode: Mode.FULL,
      url: `http://localhost:${PORT}/${scenario.path}`,
      setupTest: async (page: puppeteer.Page) => {
        await page.mouse.move(200, 200);
        await scrollOverTime(page, {
          duration: 8000,
          deltaY: 100,
        });
      },
    });
    return [...previous, { scenario, samples, images }];
  }, Promise.resolve<{ scenario: Scenario; samples: Sample[]; images: FrameObject[] }[]>([]));

  rimraf.sync("screenshots");
  for (const { scenario, samples, images } of result) {
    await mkdirIfNotExists(`screenshots/${scenario.path}`);
    for (const frame of images) {
      await fs.writeFile(
        `screenshots/${scenario.path}/${frame.metadata.timestamp}.png`,
        frame.data,
        "base64"
      );
    }
    console.log(`${scenario.name}:`);
    printSampleMetrics(samplesToSampleMetrics(samples));
  }

  await browser.close();

  await fs.writeFile(
    "src/latests-autogenerated-samples.json",
    JSON.stringify(
      result.reduce(
        (acc, { scenario, samples }) => ({
          ...acc,
          [scenario.path]: samples,
        }),
        {}
      ),
      null,
      2
    )
  );
}

(async () => {
  const server = await preview({ preview: { port: PORT } });
  await runPuppeteerBenchmark();
  server.httpServer.close();
})();
